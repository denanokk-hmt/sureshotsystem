#!/usr/bin/env python
#coding: utf-8
#
# divsen 千で割る（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = "divsen [-s] <f1> <f2> ... <file>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'(\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?$'
		# 1: 1st field
		# 4: 2nd field

import re
import os
import sys
from decimal import *

def round(x, n):
	return x.quantize(Decimal('.1') ** n)

def error(msg, *arg):
	print >> sys.stderr, 'Error[divsen] :', msg % arg
	sys.exit(1)

def usage():
	print >> sys.stderr, "Usage   :", _usage
	print >> sys.stderr, "Version :", _version
	print >> sys.stderr, "         ", _code
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv):
		file = sys.stdin
	elif sys.argv[n] == '-':
		file = sys.stdin
		del sys.argv[n]
	else:
		try:
			file = open(sys.argv[n], mode)
			del sys.argv[n]
		except:
			file = sys.stdin
	return file

#
# フィールド値の取得
#
def getval(line, n):
	if re.match(r'(\+|-)?(\d+\.?|\d*\.\d+)$', line.getField(n)):
		return Decimal(line.getField(n))
	else:
		error("数値変換できません。")

#
# 百分率の計算
#
def percent(x, y, prec):
	if x == 0:
		return round(Decimal(0), prec)
	return round(100 * x / y, prec)

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 2:
		usage()

	#
	# 丸めモードの設定
	#
	getcontext().rounding = ROUND_HALF_UP

	#
	# -s
	#
	if sys.argv[1] == '-s':
		preserve = True
		del sys.argv[1]
		if len(sys.argv) < 2:
			usage()
	else:
		preserve = False

	#
	# 入力ファイルのオープン
	#
	file = open_file(len(sys.argv) - 1)
	if len(sys.argv) < 2:
		usage()

	#
	# １行入力
	#
	line = file.readline()
	if not line:
		sys.exit(0)
	line = FieldLine(line)
	nf = line.size()

	#
	#  フィールドの取得
	#
	key = []
	for arg in sys.argv[1:]:
		r = re.match(_keypat, arg)
		if not r:
			error("フィールド指定が正しくありません。")
		f1 = line.getFieldNum(r.group(1))
		if r.group(4):
			f2 = line.getFieldNum(r.group(4))
			if f2 < f1:
				error("フィールド位置が昇順になっていません。")
			key += range(f1, f2 + 1)
		else:
			key += [ f1 ]
	if max(key) > nf:
		error("フィールド番号が大きすぎます。")
	for x in zip(key, key[1:]):
		if x[0] >= x[1]:
			error("フィールド位置が昇順になっていません。")

	#
	# メインループ
	#
	while True:
		f = key[:]
		for i in range(1, nf + 1):
			if i < f[0]:
				print line.getField(i),
				continue
			x = getval(line, i) / 1000
			if preserve:
				r = re.match(r'[^.]*\.?(\d*)', line.getField(i))
				prec = len(r.group(1)) + 3
				print '%.*f' % (prec, x),
			else:
				print '%.0f' % round(x, 0),
			del f[0]
		print
		line = file.readline()
		if not line:
			sys.exit(0)
		line = FieldLine(line)
		if line.size() != nf:
			error("フィールド数が異なっています。")
