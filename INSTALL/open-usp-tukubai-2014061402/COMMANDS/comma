#!/usr/bin/env python
#coding: utf-8
#
# comma カンマを振る（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = "comma [+<n>h][-4] <f1> <f2> ... <file>"
_usage1 = "comma -d[4] <string>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_keypat = r'(\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?$'
		# 1: 1st field
		# 4: 2nd field

import re
import os
import sys

def error(msg, *arg):
	print >> sys.stderr, 'Error[comma] :', msg % arg
	sys.exit(1)

def usage():
	print >> sys.stderr, "Usage   :", _usage
	print >> sys.stderr, "        :", _usage1
	print >> sys.stderr, "Version :", _version
	print >> sys.stderr, "         ", _code
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv):
		file = sys.stdin
	elif sys.argv[n] == '-':
		file = sys.stdin
		del sys.argv[n]
	else:
		try:
			file = open(sys.argv[n], mode)
			del sys.argv[n]
		except:
			file = sys.stdin
	return file

#
# カンマ付け
#
def comma(str, four):
	if four:
		l = 4
	else:
		l = 3
	str = ' ' * ((len(str) + l - 1) / l * l - len(str)) + str
	str = re.sub('(.{%d})' % l, r',\1', str)
	return re.sub('^, *', '', str)

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 2 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# -d[4]
	#
	if re.match(r'-d4?$', sys.argv[1]):
		if len(sys.argv) != 3:
			usage()
		print comma(sys.argv[2], sys.argv[1][-1] == '4')
		sys.exit(0)

	#
	# +<n>h
	#
	if re.match(r'\+\d*h$', sys.argv[1]):
		if len(sys.argv[1]) == 2:
			header = 1
		else:
			header = int(sys.argv[1][1:-1])
			if header == 0:
				header = 1
		del sys.argv[1]
		if len(sys.argv) < 2:
			usage()
	else:
		header = 0

	#
	# -4
	#
	if sys.argv[1] == '-4':
		four = True
		del sys.argv[1]
		if len(sys.argv) < 2:
			usage()
	else:
		four = False

	#
	# 入力ファイルのオープン
	#
	file = open_file(len(sys.argv) - 1)
	if len(sys.argv) < 2:
		usage()

	#
	# ヘッダー処理
	#
	for i in range(header):
		line = file.readline()
		if not line:
			sys.exit(0)
		print line,

	#
	# メインループ
	#
	for line in file:
		line = FieldLine(line)
		nf = line.size()

		#
		#  フィールドの取得
		#
		key = []
		for arg in sys.argv[1:]:
			r = re.match(_keypat, arg)
			if not r:
				error("フィールド指定が正しくありません。")
			f1 = line.getFieldNum(r.group(1))
			if r.group(4):
				f2 = line.getFieldNum(r.group(4))
				if f1 > f2:
					error("フィールド位置が昇順になっていません。")
				key += range(f1, f2 + 1)
			else:
				key += [ f1 ]
		if max(key) > nf:
			error("フィールド番号が大きすぎます。")
		for x in zip(key, key[1:]):
			if x[0] >= x[1]:
				error("フィールド位置が昇順になっていません。")

		#
		# カンマ処理
		#
		f = key[:]
		for i in range(1, nf + 1):
			if not f or i < f[0]:
				print line.getField(i),
				continue
			print comma(line.getField(i), four),
			del f[0]
		print

	sys.exit(0)
