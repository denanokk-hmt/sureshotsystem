#!/usr/bin/env python
#coding: utf-8
#
# check_need_name フィールド必須チェック（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Ryuichi Ueda
# 
# The MIT License
# 
# Copyright (C) 2011 Universal Shell Programming Laboratory
# 
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
# 
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
# 
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = "check_need_name <check_file> <name_file>"
_option = "--blank <string>"
_version = "Sat Apr 14 17:41:05 JST 2012"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4+, 3.1, 3.2/UTF-8)"

import re
import os
import sys
import codecs

def die(msg):
	sys.stderr.write( 'Error[check_need_name] : ' + msg + "\n")
	sys.exit(1)

def usage():
	sys.stderr.write("Usage     : "+ _usage + "\n")
	sys.stderr.write("Option    : "+ _option + "\n")
	sys.stderr.write("Version   : "+ _version + "\n")
	sys.exit(1)

class Checker:
	def __init__(self):
		self.blank_string = "_"
		self.keys = []

	def setBlankString(self,s):
		self.blank_string = s

	def setKeys(self,checkfile):
		for line in checkfile:
			key = line.strip().split(' ')[0]
			self.keys.append(key)

	def removeUnderscore(self,keystr):
		tmp = keystr.split("_")
		if len(tmp) > 1:
			return "_".join(tmp[:-1])

		return keystr

	def checkKeys(self,namefile):
		#setKeysで配列にセットしたキーを一つずつ消していく

		for line in namefile:
			tokens = line.strip().split(' ')

			if len(tokens) == 0:
				continue

			#アンダーバー付きキーの処理
			tokens[0] = self.removeUnderscore(tokens[0])

			if tokens[0] not in self.keys:
				continue
			#blank文字列のチェック
			if len(tokens) < 2:
				continue

			#上の条件をすべてクリアしたらキーを消す
			if tokens[1] != self.blank_string:
				pos = self.keys.index(tokens[0])
				self.keys[pos] = None

		remain = [ e for e in self.keys if e != None ]
		if len(remain) != 0:
			print("\n".join(remain))
			sys.exit(1)
		else:
			sys.exit(0)
				

def optionNumTest(argv):
	if '--blank' in sys.argv:
		return len(argv) == 5
	else:
		return len(argv) == 3

	
def openReadFile(file_name):
	if file_name != "-":
		try:    return codecs.open(file_name,'r','utf-8')
		except: error("ファイルを開けません。")

	if sys.version_info[0] < 3:
		return codecs.getreader('utf-8')(sys.stdin)

	return codecs.getreader('utf-8')(sys.stdin.detach())

def resetStdout():
	if sys.version_info[0] < 3:
		return codecs.getwriter('utf-8')(sys.stdout)

	return codecs.getwriter('utf-8')(sys.stdout.detach())

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) <= 1 : usage()
	if '--help' in sys.argv : usage()
	if '--version' in sys.argv : usage()

	checker = Checker()

	#blank扱いする文字列のセット
	if '--blank' in sys.argv:
		pos = sys.argv.index('--blank') + 1
		if pos != 2:
			die("--blankオプションはコマンドの直後に指定してください。")
		if pos < len(sys.argv):
			checker.setBlankString(sys.argv[pos])
		else:
			die("--blankオプションの位置が不正です。")

	if not optionNumTest(sys.argv):
		die("オプションの数が不正です。")

	if sys.argv[-2] == '-' and sys.argv[-1] == '-':
		die("標準入力の二つ指定しています。")
		
	#ファイルの準備
	checkfile = openReadFile(sys.argv[-2])
	namefile = openReadFile(sys.argv[-1])
	sys.stdout = resetStdout()

	checker.setKeys(checkfile)
	checker.checkKeys(namefile)

	sys.exit(0)
