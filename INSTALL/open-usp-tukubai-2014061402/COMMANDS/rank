#!/usr/bin/env python
#coding: utf-8
#
# rank 順位をつける（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = "rank [ref=<ref>] [key=<key>] <file>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_refpat = r'(\d+)(([/@]\d+)*)$'
		# 1: 1st field
		# 2: 2nd and later fields with separator
_keypat = r'(\d+$)'

import re
import os
import sys
import stat

def round(x, n):
	return x.quantize(Decimal('.1') ** n)

def error(msg, *arg):
	print >> sys.stderr, 'Error[ratio] :', msg % arg
	sys.exit(1)

def usage():
	print >> sys.stderr, "Usage   :", _usage
	print >> sys.stderr, "Version :", _version
	print >> sys.stderr, "         ", _code
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv) or sys.argv[n] == '-':
		file = sys.stdin
	else:
		try:
			file = open(sys.argv[n], mode)
		except:
			error("ファイル %s をオープンできません。", sys.argv[n])
	return file

#
# キー文字列の抽出
#
def keystr(line, key):
	return ' '.join(map(line.getField, key))

#
#メイン関数
#
if __name__ == '__main__':

        if len(sys.argv) > 1 \
         and (sys.argv[1] == '--help' \
          or sys.argv[1] == '--version'):
		usage()

	#
	# ref=
	#
	if len(sys.argv) > 1 and sys.argv[1][0:4] == 'ref=':
		r = re.match('ref=' + _refpat, sys.argv[1])
		if not r:
			error("ref 引数が正しくありません。");
		ref = [ int(r.group(1)) ]
		while r.group(2) != '':
			sep = r.group(2)[0]
			str = r.group(2)[1:]
			r = re.match(_refpat, str)
			n = int(r.group(1))
			if sep == '@':
				ref += [ n ]
			elif key[-1] <= n:
				ref += range(ref[-1] + 1, n + 1)
			else:
				ref += range(ref[-1] - 1, n - 1, -1)
		if min(ref) == 0:
			error("ref 引数が0です。")
		ref_max = max(ref)
		del sys.argv[1]
	else:
		ref = None

	#
	# key=
	#
	if len(sys.argv) > 1 and sys.argv[1][0:4] == 'key=':
		k = re.match('key=' + _keypat, sys.argv[1])
		if not k:
			error("key 引数が正しくありません。");
		key = int(k.group(1))
		if key == 0:
			error("key 引数が0です。")
		del sys.argv[1]
	else:
		key = None

	#
	# 入力ファイルのオープン
	#
	file = open_file(1)

	#
	# メインループ
	#
	n, nn, last_ref, last_key = 0, 0, '', ''
	for line in file:
		line = FieldLine(line, True)
		if ref and line.size() < ref_max \
		 or key and line.size() < key:
			error("フィールドが足りません。")
		elif ref and keystr(line, ref) != last_ref:
			n, nn, last_ref, last_key = 0, 0, keystr(line, ref), ''
		n += 1
		if not key:
			nn = n
		elif line.getField(key) != last_key:
			last_key = line.getField(key)
			nn = n
		print nn, line.getField(0)

	sys.exit(0)
