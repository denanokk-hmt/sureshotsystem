#!/usr/bin/env python
#coding: utf-8
#
# kasan 加算する（Open usp Tukubai版）
# 
# designed by Nobuaki Tounaka
# written by Yoshio Katayama
#
# The MIT License
#
# Copyright (C) 2011 Universal Shell Programming Laboratory
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

_usage = "kasan [+r] [ref=<ref>] key=<n> <file>"
_version = "Fri Oct 21 11:26:06 JST 2011"
_code = "Open usp Tukubai (LINUX+FREEBSD/PYTHON2.4/UTF-8)"
_refpat = r'(|(\d+|NF(-\d+)?)(/(\d+|NF(-\d+)?))?)$'
		# 2: 1st field
		# 5: 2nd field
_keypat = r'(\d+|NF(-\d+)?)(([/@](\d+|NF(-\d+)?))*)$'
		# 1: 1st field
		# 3: 2nd and later fields with separator

import re
import os
import sys
from decimal import Decimal

def error(msg, *arg):
	print >> sys.stderr, 'Error[kasan] :', msg % arg
	sys.exit(1)

def usage():
	print >> sys.stderr, "Usage   :", _usage
	print >> sys.stderr, "Version :", _version
	print >> sys.stderr, "         ", _code
	sys.exit(1)

class FieldLine:
	def __init__(self, line, allow_z = False):
		self.__allow_zero = allow_z
		line = line.rstrip('\n')
		self.__fields = [ line ]
		self.__fields += [ x for x in line.split(' ') if x ]

	def size(self):
		return len(self.__fields) - 1

	def getFieldNum(self, key):
		if type(key) == type(0):
			return key
		if re.match(r'\d+$', key):
			key = int(key)
		elif key == 'NF':
			key = self.size()
		else:
			key = self.size() - int(key[3:])
			if key <= 0:
				error("NF-x の x が大きすぎます。")
		if key < 0:
			error("フィールド番号が負です。")
		if key == 0 and not self.__allow_zero:
			error("フィールド番号が０です。")
		if key > self.size():
			error("フィールド番号が大きすぎます。")
		return key

	def getField(self, s, e = None):
		s = self.getFieldNum(s)
		if e == None:
			e = s
		else:
			e = self.getFieldNum(e)
		if s <= e:
			return ' '.join(self.__fields[s : e + 1])
		else:
			t = self.__fields[e : s + 1]
			t.reverse()
			return ' '.join(t)

#
# 入力ファイルオープン
#
def open_file(n, mode = 'r'):
	if n >= len(sys.argv):
		file = sys.stdin
	elif sys.argv[n] == '-':
		file = sys.stdin
		del sys.argv[n]
	else:
		try:
			file = open(sys.argv[n], mode)
			del sys.argv[n]
		except:
			file = sys.stdin
	return file

#
# フィールド値の取得
#
def getval(line, n):
	if re.match(r'(\+|-)?(\d+\.?|\d*\.\d+)$', line.getField(n)):
		return Decimal(line.getField(n))
	else:
		error("数値変換できません。")

#
# ref= の解析
#
def getref(line, arg):
	r = re.match('ref=' + _refpat, arg)
	if r == None:
		error("ref 引数が正しくありません。");
	elif r.group(2) == None:
		return [ 0, 0 ]
	ref_s = line.getFieldNum(r.group(2))
	if r.group(5) == None:
		return [ ref_s, ref_s ]
	else:
		ref_e = line.getFieldNum(r.group(5))
		if ref_s ==0 and ref_e != 0 \
		 or ref_s > ref_e:
			error("ref 引数が正しくありません。")
		return [ ref_s, ref_e ]

#
# key= の解析
#
def getkey(line, arg):
	k = re.match('key=' + _keypat, arg)
	if k == None:
		error("key 引数が正しくありません。");
	key = [ line.getFieldNum(k.group(1)) ]
	if key[0] == 0:
		error("key 引数が正しくありません。");
	while k.group(3) != '':
		sep = k.group(3)[0]
		str = k.group(3)[1:]
		k = re.match(_keypat, str)
		n = line.getFieldNum(k.group(1))
		if sep == '@':
			key += [ n ]
		elif key[-1] <= n:
			key += range(key[-1] + 1, n + 1)
		else:
			key += range(key[-1] - 1, n - 1, -1)
	return key

#
#メイン関数
#
if __name__ == '__main__':

	if len(sys.argv) < 2 \
	 or sys.argv[1] == '--help' \
	 or sys.argv[1] == '--version':
		usage()

	#
	# +r
	#
	if sys.argv[1] == '+r':
		replace = True
		del sys.argv[1]
		if len(sys.argv) < 2:
			usage()
	else:
		replace = False

	file = open_file(len(sys.argv) - 1)

	#
	# １行入力
	#
	line = file.readline()
	if not line:
		sys.exit(0)
	line = FieldLine(line, True)

	#
	# ref= / key=
	#
	del sys.argv[0]
	ref = None
	key = None
	for arg in sys.argv:
		if arg[0:4] == 'ref=':
			if (ref):
				error("ref= を２回以上指定しています。")
			ref = getref(line, arg)
		elif arg[0:4] == 'key=':
			if (key):
				error("key= を２回以上指定しています。")
			key = getkey(line, arg)
		else:
			error("key の値が取得できません.")
	if ref == [ 0, 0 ]:
		ref = []
	if key == None:
		usage()
	for x in zip(key, key[1:]):
		if x[0] >= x[1]:
			error("key 引数が正しくありません。");
	kmax = max(key)
	if line.size() < kmax:
		error("フィールドが足りません。")

	#
	# 合計の初期化
	#
	sum = [ 0 for i in range(kmax + 1) ]
	for i in range(1, line.size() + 1):
		if i in key:
			if not replace:
				print line.getField(i),
			sum[i] += getval(line, i)
			print sum[i],
		else:
			print line.getField(i),
	print
	if ref:
		last_key = line.getField(ref[0], ref[1])

	#
	# メインループ
	#
	for line in file:
		line = FieldLine(line, True)
		if line.size() < kmax:
			error("フィールドが足りません。")
		if ref and last_key != line.getField(ref[0], ref[1]):
			sum = [ 0 for i in range(kmax + 1) ]
		for i in range(1, line.size() + 1):
			if i in key:
				if not replace:
					print line.getField(i),
				sum[i] += getval(line, i)
				print sum[i],
			else:
				print line.getField(i),
		print
		if ref:
			last_key = line.getField(ref[0], ref[1])

	sys.exit(0)
