#!/bin/bash -vx
#

########################################
#	STUFF EDIT CONFIRM.CGI
#
#   引数
#       $1:必須 $$
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> $SYSD/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/usr/local/bin:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#暗号化された社員IDを取得(暗号化されフォームに埋め込まれた社員ID)
ENC_ID=$(nameread ENC_ID $tmp-post | awk '{gsub(/^\_$/,"",$1);print}')

########################################
#社員番号を復元
STUFF_ID=$(cat ${SYSD}/TMP/$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))/${ENC_ID})

########################################
#フォーム値の設定
nameread FAMILY_NAME $tmp-post              | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value1
nameread GIVEN_NAME $tmp-post               | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value2
nameread EMAIL $tmp-post                    | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value3
nameread PASSWORD $tmp-post                 | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value4
nameread PW_CONFIRM $tmp-post               | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value5
nameread TEL1 $tmp-post                     | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value6
nameread TEL2 $tmp-post                     | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value7
nameread ADMIN $tmp-post                    | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value8

########################################
#バリデーションを設定

#FAMILY NAME
cat $tmp-value1 | awk '{print sprintf("FAMILY_NAME|ISNULL|%s",$1)}'       >> $tmp-validation  #必須入力
cat $tmp-value1 | awk '{print sprintf("FAMILY_NAME|LENGTH|%s,2,20",$1)}'  >> $tmp-validation  #length <=2 =>20

#GIVEN NAME
cat $tmp-value2 | awk '{print sprintf("GIVEN_NAME|ISNULL|%s",$1)}'        >> $tmp-validation  #必須入力
cat $tmp-value2 | awk '{print sprintf("GIVEN_NAME|LENGTH|%s,2,20",$1)}'   >> $tmp-validation  #length <=2 =>20

#EMAIL
cat $tmp-value3 | awk '{print sprintf("EMAIL|ISNULL|%s",$1)}'                   >> $tmp-validation  #必須入力
cat $tmp-value3 | awk '{print sprintf("EMAIL|DUPLICATE|STUFF,USERS,4,%s",$1)}'  >> $tmp-validation  #重複確認

#PASSWORD length <=8 
cat $tmp-value4 | awk '{print sprintf("PASSWORD|ISNULL|%s",$1)}'          >> $tmp-validation  #必須入力
cat $tmp-value4 | awk '{print sprintf("PASSWORD|LENGTH|%s,8,0",$1)}'      >> $tmp-validation  #length <=8 

#PASSWORD CONFIRMATION
cat $tmp-value5 | awk '{print sprintf("PW_CONFIRM|ISNULL|%s",$1)}'                            >> $tmp-validation  #必須入力
paste $tmp-value4 $tmp-value5 | awk '{print sprintf("PW_CONFIRM|COMPARE|SAME,%s,%s",$1,$2)}'  >> $tmp-validation  #=PASSWORD 

#TEL1
cat $tmp-value6 | awk '{print sprintf("TEL1|ISNULL|%s",$1)}'              >> $tmp-validation  #必須入力
cat $tmp-value6 | awk '{print sprintf("TEL1|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必須
cat $tmp-value6 | awk '{print sprintf("TEL1|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

#TEL2
cat $tmp-value7 | awk '{print sprintf("TEL2|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必
cat $tmp-value7 | awk '{print sprintf("TEL2|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

########################################
#バリデーションを実行
result=`${SYSD}/CGI/VALID/VALIDATION $1`

########################################
#管理者権限を取得
if [ "$(cat $tmp-value8)" = "1" ] ; then
  ADMIN_CHK="checked"
  ADMIN="管理者権限あり"
  ADMIN_VAL=1
else
  ADMIN_CHK=''
  ADMIN='管理者権限なし'
  ADMIN_VAL=0
fi

########################################
#パスワードの暗号化
if [ "$(cat $tmp-value4)" = 'NOT_CHANGE' ]; then
    echo 'NOT_CHANGE' > $tmp-sha1
else
    echo $(sha1 $(cat $tmp-value4)) > $tmp-sha1
fi

########################################
#HTMLの設定
if [ -n "$(grep "|NG" $tmp-valid-report)" ] ; then

    #Validation NG

    #########################################
    #入力画面HTMLを取得
    cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/INPUT.HTML > $tmp-html-tmp
    
    #########################################
    #バリデーション結果を元にメッセージとラベルカラーを設定
    result=`${SYSD}/CGI/VALID/ALERT_SETTING $1`

    #########################################
    #上記処理からのHTMLを受け、入力値を設定し、HTMLを完成させる
    cat $tmp-html-alert                                                 |
    sed -e "s/###FAMILY_NAME###/$(cat $tmp-value1)/"                    |
    sed -e "s/###GIVEN_NAME###/$(cat $tmp-value2)/"                     |
    sed -e "s/###EMAIL###/$(cat $tmp-value3)/"                          |
    sed -e "s/###TEL1###/$(cat $tmp-value6)/"                           |
    sed -e "s/###TEL2###/$(cat $tmp-value7)/"                           |
    sed -e "s/###PASSWORD###/$(cat $tmp-value4)/"                       |
    sed -e "s/###PW_CONFIRM###//"                                       |
    sed -e "s/###ADMIN_CHK###/${ADMIN_CHK}/"                            | 
    sed -e "s/###ADMIN_VAL###/${ADMIN_VAL}/"                            > $tmp-html

    #########################################
    #pege name
    echo "Update stuff input" > $tmp-pagename

else
    #Validation OK

    #########################################
    #確認画面のHTMLを取得、入力値を設定し、HTMLを完成させる
    cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/${ACTION}.HTML           |
    sed -e "s/###ENC_ID###/${ENC_ID}/"                                  |
    sed -e "s/###STUFF_ID###/${STUFF_ID}/"                              |
    sed -e "s/###FAMILY_NAME###/$(cat $tmp-value1)/g"                   |
    sed -e "s/###GIVEN_NAME###/$(cat $tmp-value2)/g"                    |
    sed -e "s/###EMAIL###/$(cat $tmp-value3)/g"                         |
    sed -e "s/###PASSWORD###/********/g"                                |
    sed -e "s/###EMAIL###/$(cat $tmp-value3)/g"                         |
    sed -e "s/###TEL1###/$(cat $tmp-value6)/g"                          |
    sed -e "s/###TEL2###/$(cat $tmp-value7)/g"                          |
    sed -e "s/###PASSWORD_VAL###/$(cat $tmp-sha1)/"                     |
    sed -e "s/###ADMIN###/${ADMIN}/"                                    | 
    sed -e "s/###ADMIN_VAL###/${ADMIN_VAL}/"                            > $tmp-html

    #########################################
    #pege name
    echo "Update stuff confirm" > $tmp-pagename
fi

###############################################################################
#ending
echo "OK"
exit 0
