#!/bin/bash -evx
#

########################################
#	STUFF EDIT COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
LOGIND=${SYSD}/DATA/${CATEGORY}/LOGIN
USERSD=${SYSD}/DATA/${CATEGORY}/USERS
STUFF_SESS_ID='sureshot_stuff_session_id'

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#フォーム値の設定
nameread FAMILY_NAME $tmp-post              | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value1
nameread GIVEN_NAME $tmp-post               | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value2
nameread EMAIL $tmp-post                    | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value3
nameread PASSWORD $tmp-post                 | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value4
nameread TEL1 $tmp-post                     | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value6
nameread TEL2 $tmp-post                     | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value7
nameread ADMIN $tmp-post                    | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value8
nameread ENC_ID $tmp-post                   | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value9
nameread STUFF_ID $tmp-post                 | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-value10

########################################
#バリデーションを設定

#FAMILY NAME
cat $tmp-value1 | awk '{print sprintf("FAMILY_NAME|ISNULL|%s",$1)}'       >> $tmp-validation  #必須入力
cat $tmp-value1 | awk '{print sprintf("FAMILY_NAME|LENGTH|%s,2,20",$1)}'  >> $tmp-validation  #length <=2 =>20

#GIVEN NAME
cat $tmp-value2 | awk '{print sprintf("GIVEN_NAME|ISNULL|%s",$1)}'        >> $tmp-validation  #必須入力
cat $tmp-value2 | awk '{print sprintf("GIVEN_NAME|LENGTH|%s,2,20",$1)}'   >> $tmp-validation  #length <=2 =>20

#EMAIL
cat $tmp-value3 | awk '{print sprintf("EMAIL|ISNULL|%s",$1)}'                   >> $tmp-validation  #必須入力
cat $tmp-value3 | awk '{print sprintf("EMAIL|DUPLICATE|STUFF,USERS,4,%s",$1)}'  >> $tmp-validation  #重複確認

#PASSWORD length <=8 
cat $tmp-value4 | awk '{print sprintf("PASSWORD|ISNULL|%s",$1)}'          >> $tmp-validation  #必須入力
cat $tmp-value4 | awk '{print sprintf("PASSWORD|LENGTH|%s,8,0",$1)}'      >> $tmp-validation  #length <=8 

#PASSWORD CONFIRMATION
#PASSWORDと同じ値を設定して必ず合格にする
cat $tmp-value4 | awk '{print sprintf("PW_CONFIRM|ISNULL|%s",$1)}'                      >> $tmp-validation  #必須入力
paste $tmp-value4 $tmp-value4 | awk '{print sprintf("PW_CONFIRM|COMPARE|%s,%s",$1,$2)}' >> $tmp-validation  #=PASSWORD 

#TEL1
cat $tmp-value6 | awk '{print sprintf("TEL1|ISNULL|%s",$1)}'              >> $tmp-validation  #必須入力
cat $tmp-value6 | awk '{print sprintf("TEL1|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必須
cat $tmp-value6 | awk '{print sprintf("TEL1|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

#TEL2
cat $tmp-value7 | awk '{print sprintf("TEL2|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必
cat $tmp-value7 | awk '{print sprintf("TEL2|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

########################################
#バリデーションを実行
result=`${SYSD}/CGI/VALID/VALIDATION $1`

########################################
#管理者権限を取得
if [ "$(cat $tmp-value8)" = "1" ] ; then
  ADMIN_CHK="checked"
  ADMIN="管理者権限あり"
  ADMIN_VAL=1
else
  ADMIN_CHK=''
  ADMIN='管理者権限なし'
  ADMIN_VAL=0
fi

########################################
#パスワードの暗号化
echo $(sha1 $(cat $tmp-value4)) > $tmp-sha1

########################################
#HTMLの設定
if [ -n "$(grep "|NG" $tmp-valid-report)" ] ; then

    #Validation NG

    #########################################
    #入力画面HTMLを取得
    cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/INPUT.HTML > $tmp-html-tmp
    
    #########################################
    #バリデーション結果を元にメッセージとラベルカラーを設定
    result=`${SYSD}/CGI/VALID/ALERT_SETTING $1`

    #########################################
    #上記処理からのHTMLを受け、入力値を設定し、HTMLを完成させる
    #CONFIRMからのバリデーションエラーのため、PWは削除
    cat $tmp-html-alert                                                 |
    sed -e "s/###FAMILY_NAME###/$(cat $tmp-value1)/"                    |
    sed -e "s/###GIVEN_NAME###/$(cat $tmp-value2)/"                     |
    sed -e "s/###EMAIL###/$(cat $tmp-value3)/"                          |
    sed -e "s/###TEL1###/$(cat $tmp-value6)/"                           |
    sed -e "s/###TEL2###/$(cat $tmp-value7)/"                           |
    sed -e "s/###PASSWORD###//"                                         |
    sed -e "s/###PW_CONFIRM###//"                                       |
    sed -e "s/###ADMIN_CHK###/${ADMIN_CHK}/"                            | 
    sed -e "s/###ADMIN_VAL###/${ADMIN_VAL}/"                            > $tmp-html

    #########################################
    #pege name
    echo "New stuff input" > $tmp-pagename
    
    exit 0
fi

#######################################
#Get Form Data
ENC_ID=$(cat $tmp-value9)
STUFF_ID=$(cat $tmp-value10)
FAMILY_NAME=$(cat $tmp-value1)
GIVEN_NAME=$(cat $tmp-value2)
EMAIL=$(cat $tmp-value3)
PASSWORD=$(cat $tmp-value4)
TEL1=$(cat $tmp-value6)
TEL2=$(cat $tmp-value7)
ADMIN_FLG=$(cat $tmp-value8)
[ "${ADMIN_FLG}" = "1" ] && ADMIN="管理者権限あり" || ADMIN='管理者権限なし'
DEL_FLG=0

######################################
#INPUT表示時点で作成した暗号化スタッフ番号を取得し、整合性の確認を行う
STUFF_NUM=$(cat ${SYSD}/TMP/$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))/${ENC_ID})

######################################
#暗号化の一時ファイルは削除
rm -f ${SYSD}/TMP/$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))/${ENC_ID}

######################################
#スタッフIDの整合性が取れない場合、CONFIRM画面に戻す
if [ "${STUFF_ID}" -ne "${STUFF_NUM}" ]; then
    cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/CONFIRM.HTML                         |
    sed -e "s/###STUFF_ID_NOT_MATCH###/データ不整合により更新出来ませんでした。/"   |
    sed -e "s/###FAMILY_NAME_LABEL###/${FAMILY_NAME}/"                              |
    sed -e "s/###GIVEN_NAME_LABEL###/${GIVEN_NAME}/"                                |
    sed -e "s/###EMAIL_LABEL###/${EMAIL}/"                                          |
    sed -e "s/###PASSWORD_LABEL###/********/"                                       > $tmp-html
    exit 0
fi

########################################
#該当のSTUFFのデータ操作をロック
LOCK=`${SYSD}/CGI/LOCK/LOCK $1 'STUFF' ${STUFF_NUM}`
LOCK_STATUS=$(echo $LOCK | cut -d'.' -f4)
[ ${LOCK_STATUS} != 'LOCKED' ] && exit 0 || :

########################################
#パスワードの値が"NOT_CHANGE"のままならば、変更が無いので、既存データを取得
[[ "${PASSWORD}" = 'NOT_CHANGE' ]] && PASSWORD=$(cat ${LOGIND}/LV3/*_login_*   | 
awk -v id=$STUFF_NUM '$1==id{print $3}')

########################################
#既存データから作成日時取得、現在日時を更新日時とする
ls ${SYSD}/DATA/STUFF/USERS/LV1/${STUFF_NUM}_stuff_* | cut -d'_' -f3 | 
sort -nk1,1 | head -n 1 > $tmp-create
CREATE_DATE=$(cat $tmp-create)
UPDATE_DATE=$(date +%Y%m%d%H%M%S)

########################################
#更新者の取得
CREATE_USER=$(cat ${USERSD}/LV3/${STUFF_NUM}* | awk '{print $9}')
UPDATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))

########################################
#       ログインデータ　
########################################

########################################
#ログインデータ用に一時ファイルに書き出し
echo ${STUFF_NUM} ${EMAIL} ${PASSWORD} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} 0 > $tmp-login

########################################
#データ配置
#LV1
mv $tmp-login ${LOGIND}/LV1/${STUFF_NUM}_login_${UPDATE_DATE}

#LV2:変更されたデータとファイルを入れ替える
#削除フラグは含めない-->dファイルとして扱う
cat ${LOGIND}/LV1/${STUFF_NUM}_login_${UPDATE_DATE} | awk '{$NF=""; print $0}' > ${LOGIND}/LV2/${STUFF_NUM}_login_${UPDATE_DATE}
ls ${LOGIND}/LV2/${STUFF_NUM}* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)

#LV3:LV2のコピー
cp -p ${LOGIND}/LV2/${STUFF_NUM}_login_${UPDATE_DATE} ${LOGIND}/LV3/${STUFF_NUM}_login_${UPDATE_DATE}
ls ${LOGIND}/LV3/${STUFF_NUM}* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)


########################################
#       スタッフデータ　
########################################

########################################
#一時ファイルに書き込み
#stuff_id	family_name	given_name	account_id	tel1	tel2	create_date	update_date	create_user	update_user	admin_flg	del_flg
echo ${STUFF_NUM} ${FAMILY_NAME} ${GIVEN_NAME} ${EMAIL} ${TEL1} ${TEL2} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} ${ADMIN_FLG} ${DEL_FLG} > $tmp-stuff

########################################
#スタッフ用データの格納
#LV1:原始データとして、ファイル追加のみを行う
mv $tmp-stuff ${USERSD}/LV1/${STUFF_NUM}_stuff_${UPDATE_DATE}

#LV2:変更されたデータとファイルを入れ替える
#削除フラグはもたない-->dファイルにする
cat ${USERSD}/LV1/${STUFF_NUM}_stuff_${UPDATE_DATE} | awk '{$NF=""; print $0}' > ${USERSD}/LV2/${STUFF_NUM}_stuff_${UPDATE_DATE}
ls ${USERSD}/LV2/${STUFF_NUM}* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)

#LV3:リンク用のURLを追加,変更されたデータとファイルを入れ替える
#削除フラグはもたない-->dファイルにする
cat ${USERSD}/LV2/${STUFF_NUM}_stuff_${UPDATE_DATE} |
awk '{print sprintf("%s\
/APP/STUFF/USERS?action=SHOW&id=%d \
/APP/STUFF/EDIT?action=INPUT&id=%d \
/APP/STUFF/DELETE?action=CONFIRM&id=%d"\
,$0,$1,$1,$1)}'  > ${USERSD}/LV3/${STUFF_NUM}_stuff_${UPDATE_DATE}
ls ${USERSD}/LV3/${STUFF_NUM}* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)

########################################
#STUFFのデータ操作ロックを解除
UNLOCK_STATUS=`${SYSD}/CGI/LOCK/UNLOCK $1 'STUFF' ${STUFF_NUM}`
[ ${UNLOCK_STATUS} != 'UNLOCK' ] && exit 0 || :

########################################
#SET SESSION
COOK=`${SYSD}/CGI/SESSION/SESSION_SET ${STUFF_SESS_ID} 15 ${UPDATE_USER}`
echo $COOK > $tmp-cook

########################################
#HTMLの設定
ACTION=`cat $tmp-action`
cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/${ACTION}.HTML   |
sed -e "s/###FAMILY_NAME_LABEL###/${FAMILY_NAME}/"          |
sed -e "s/###GIVEN_NAME_LABEL###/${GIVEN_NAME}/"            |
sed -e "s/###EMAIL_LABEL###/${EMAIL}/"                      |
sed -e "s/###TEL1_LABEL###/${TEL1}/"                        |
sed -e "s/###TEL2_LABEL###/${TEL2}/"                        |
sed -e "s/###ADMIN_LABEL###/${ADMIN}/"                      > $tmp-html

#########################################
#page name
echo "Update stuff complete" > $tmp-pagename

#########################################
#ending
echo "OK"
exit 0
