#!/bin/bash -evx
#

########################################
#	STUFF NEW COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
STUFFD=${SYSD}/DATA/${CATEGORY}
USERSD=${STUFFD}/USERS
STUFF_SESS_ID='sureshot_stuff_session_id'

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#フォーム値の設定
nameread FAMILY_NAME  $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-2
nameread GIVEN_NAME   $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-3
nameread EMAIL_VAL    $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-4
nameread PASSWORD     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-5
nameread TEL1         $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-6
nameread TEL2         $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-7
nameread ADMIN        $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-8
echo 0                                                             > $tmp-pk-9

########################################
#認証用ID,PWを取得
STUFF_NO=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))
cat ${SYSD}/TMP/${STUFF_NO}/STUFF/email             > $tmp-email
echo -n $(cat ${SYSD}/TMP/${STUFF_NO}/STUFF/pw)     | 
shasum -a 256 | cut -d' ' -f1                       > $tmp-sha-pw
echo -n $(cat ${SYSD}/TMP/${STUFF_NO}/STUFF/pwconf) | 
shasum -a 256 | cut -d' ' -f1                       > $tmp-sha-pwconf

########################################
#バリデーションを設定

#FAMILY NAME
cat $tmp-pk-2 | awk '{print sprintf("FAMILY_NAME|ISNULL|%s",$1)}'       >> $tmp-validation  #必須入力
cat $tmp-pk-2 | awk '{print sprintf("FAMILY_NAME|LENGTH|%s,2,20",$1)}'  >> $tmp-validation  #length <=2 =>20

#GIVEN NAME
cat $tmp-pk-3 | awk '{print sprintf("GIVEN_NAME|ISNULL|%s",$1)}'        >> $tmp-validation  #必須入力
cat $tmp-pk-3 | awk '{print sprintf("GIVEN_NAME|LENGTH|%s,2,20",$1)}'   >> $tmp-validation  #length <=2 =>20

#EMAIL
cat $tmp-pk-4 | awk '{print sprintf("EMAIL|ISNULL|%s",$1)}'                   >> $tmp-validation  #必須入力
cat $tmp-pk-4 | awk '{print sprintf("EMAIL|DUPLICATE|STUFF,USERS,4,%s",$1)}'  >> $tmp-validation  #重複確認

#PASSWORD length <=8 
cat $tmp-pk-5 | awk '{print sprintf("PASSWORD|ISNULL|%s",$1)}'          >> $tmp-validation  #必須入力
cat $tmp-pk-5 | awk '{print sprintf("PASSWORD|LENGTH|%s,8,0",$1)}'      >> $tmp-validation  #length <=8 
paste $tmp-pk-5 $tmp-sha-pw | awk '{print sprintf("PW_CONFIRM|COMPARE|SAME,%s,%s",$1,$2)}'  >> $tmp-validation  #PWの値一致

#PASSWORD CONFIRMATION
paste $tmp-pk-5 $tmp-sha-pwconf | awk '{print sprintf("PW_CONFIRM|COMPARE|SAME,%s,%s",$1,$2)}'  >> $tmp-validation  #PWとPWCONFの値一致 

#TEL1
cat $tmp-pk-6 | awk '{print sprintf("TEL1|ISNULL|%s",$1)}'              >> $tmp-validation  #必須入力
cat $tmp-pk-6 | awk '{print sprintf("TEL1|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必須
cat $tmp-pk-6 | awk '{print sprintf("TEL1|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

#TEL2
cat $tmp-pk-7 | awk '{print sprintf("TEL2|MATCH|%s,-,1",$1)}'           >> $tmp-validation  #ハイフン必
cat $tmp-pk-7 | awk '{print sprintf("TEL2|NUMERIC|%s,-",$1)}'           >> $tmp-validation  #ハイフン覗いたら数字のみ

########################################
#バリデーションを実行
result=`${SYSD}/CGI/VALID/VALIDATION $1`

########################################
#管理者権限を取得
if [ "$(cat $tmp-pk-8)" = "1" ] ; then
  ADMIN_CHK="checked"
  ADMIN="管理者権限あり"
  ADMIN_VAL=1
else
  ADMIN_CHK=''
  ADMIN='管理者権限なし'
  ADMIN_VAL=0
fi

########################################
#スタッフDirを作成
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${STUFFD}/ACCOUNTS`

########################################
#アカウントID(email)を暗号化してsha256ファイル名にしたEMAILアドで閉じ込める
cat $tmp-email | openssl enc -aes-128-cbc -e -base64 -pass pass:$(cat ${SYSD}/CGI/BIN/key) > ${STUFFD}/ACCOUNTS/$(cat $tmp-pk-4)

########################################
#HTMLの設定
if [ -n "$(grep "|NG" $tmp-valid-report)" ] ; then

    #Validation NG

    #########################################
    #入力画面HTMLを取得
    cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/INPUT.HTML > $tmp-html-tmp
    
    #########################################
    #バリデーション結果を元にメッセージとラベルカラーを設定
    result=`${SYSD}/CGI/VALID/ALERT_SETTING $1 - -`

    #########################################
    #上記処理からのHTMLを受け、入力値を設定し、HTMLを完成させる
    #CONFIRMからのバリデーションエラーのため、PWは削除
    cat $tmp-html-alert                             |
    sed -e "s/###FAMILY_NAME###/$(cat $tmp-pk-2)/"  |
    sed -e "s/###GIVEN_NAME###/$(cat $tmp-pk-3)/"   |
    sed -e "s/###EMAIL###/$(cat $tmp-email)/"       |
    sed -e "s/###TEL1###/$(cat $tmp-pk-6)/"         |
    sed -e "s/###TEL2###/$(cat $tmp-pk-7)/"         |
    sed -e "s/###PASSWORD###//"                     |
    sed -e "s/###PW_CONFIRM###//"                   |
    sed -e "s/###ADMIN_CHK###/${ADMIN_CHK}/"        | 
    sed -e "s/###ADMIN_VAL###/${ADMIN_VAL}/"        > $tmp-html

    #########################################
    #pege name
    echo "New stuff input" > $tmp-pagename
    
    exit 0
fi

#########################################
##新規作業番号を確定する
STUFF_NUM=$(${SYSD}/CGI/NUMBER/NUMBER $1) #GK
echo ${STUFF_NUM} > $tmp-pk-1

########################################
#Set DATE
CREATE_DATE=$(date +%Y%m%d%H%M%S)
UPDATE_DATE=$CREATE_DATE

########################################
#更新者の取得
CREATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))
UPDATE_USER=${CREATE_USER}

########################################
#スタッフDirを作成
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${USERSD}`

########################################
#データ配置
#LV1
cat $tmp-pk-1 > ${USERSD}/LV1/${STUFF_NUM}_1_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-2 > ${USERSD}/LV1/${STUFF_NUM}_2_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-3 > ${USERSD}/LV1/${STUFF_NUM}_3_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-4 > ${USERSD}/LV1/${STUFF_NUM}_4_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-5 > ${USERSD}/LV1/${STUFF_NUM}_5_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-6 > ${USERSD}/LV1/${STUFF_NUM}_6_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-7 > ${USERSD}/LV1/${STUFF_NUM}_7_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-8 > ${USERSD}/LV1/${STUFF_NUM}_8_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-9 > ${USERSD}/LV1/${STUFF_NUM}_9_${CREATE_USER}_${CREATE_DATE}

#LV2
cp -fp ${USERSD}/LV1/${STUFF_NUM}_* ${USERSD}/LV2/

#LV3
for file in $(ls ${USERSD}/LV2/${STUFF_NUM}_* | sort -t$'_' -nk1);
do
  VALUE=$(echo $VALUE `cat $file`)
done
echo ${VALUE} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} \
"/APP/STUFF/USERS?action=SHOW&id=${STUFF_NUM}" \
"/APP/STUFF/EDIT?action=INPUT&id=${STUFF_NUM}" \
"/APP/STUFF/DELETE?action=CONFIRM&id=${STUFF_NUM}" \
> ${USERSD}/LV3/${STUFF_NUM}_stuff_${CREATE_DATE}

########################################
#TMP/*/STUFを削除F
rm -rf ${SYSD}/TMP/${STUFF_NO}/STUFF

########################################
#HTMLの設定
cat ${SYSD}/APPLI/${CATEGORY}/${FUNC}/HTML/$(cat $tmp-action).HTML  |
sed -e "s/###FAMILY_NAME_LABEL###/$(cat $tmp-pk-2)/"                |
sed -e "s/###GIVEN_NAME_LABEL###/$(cat $tmp-pk-3)/"                 |
sed -e "s/###EMAIL_LABEL###/$(cat $tmp-email)/"                     |
sed -e "s/###TEL1_LABEL###/$(cat $tmp-pk-6)/"                       |
sed -e "s/###TEL2_LABEL###/$(cat $tmp-pk-7)/"                       |
sed -e "s/###ADMIN_LABEL###/${ADMIN}/"                              > $tmp-html

#########################################
#pege name
echo "New stuff complete" > $tmp-pagename

###############################################################################
#ending
echo "OK"
exit 0
