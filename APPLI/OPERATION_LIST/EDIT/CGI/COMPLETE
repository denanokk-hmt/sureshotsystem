#!/bin/bash -evx
#

########################################
#	OPERATION_LIST/EDIT COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
DATAD=${SYSD}/DATA/${CATEGORY}/LISTS

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#作業カテゴリ更新中は、処理をさせない
#ls ${SYSD}/LOCK/OPERATION_CATEGORY/* > $tmp-checker
#if [ -n cat $tmp-checker ] ; then
#    echo "333" > $tmp-ajax-html
#    exit 0
#fi

#######################################
#フォームの入力値を取得
nameread EDIT_CATEGORY_NO     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-category-no
nameread EDIT_CATEGORY_NX     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-category-nx
nameread EDIT_CATEGORY_NM     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-category-nm
nameread EDIT_OPERATION_NO    $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-1
nameread EDIT_OPERATION_NAME  $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-2-org
nameread EDIT_OPERATION_PRICE $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-3

NUM=$(cat $tmp-pk-1)
CATEGORY_NO=$(cat $tmp-category-no)

#######################################
#「&」エスケープ
cat $tmp-pk-2-org | sed 's/\&/\\\\\\&/' > $tmp-pk-2

########################################
#バリデーションを設定

#CATEGORY_NM
cat $tmp-category-no | awk '{print sprintf("CATEGORY_NM|ISNULL|%s",$1)}'                            >> $tmp-validation  #必須選択

#OPERATION_NAME_NEW
cat $tmp-pk-2 | awk '{print sprintf("OPERATION_NAME|ISNULL|%s",$1)}'                                >> $tmp-validation  #必須入力
cat $tmp-pk-2 | awk '{print sprintf("OPERATION_NAME|LENGTH|%s,3,0",$1)}'                            >> $tmp-validation  #3文字以上
cat $tmp-pk-2 | awk -v gk=${NUM} '{print sprintf("OPERATION_NAME|DUPLICATE|OPERATION_LIST,LISTS/*,%s,2,%s",gk,$1)}'      >> $tmp-validation  #重複確認

#PRICE
cat $tmp-pk-3 | awk '{print sprintf("OPERATION_PRICE|ISNULL|%s",$1)}'                               >> $tmp-validation  #必須入力

########################################
#バリデーションを実行
result=`${SYSD}/CGI/VALID/VALIDATION $1`
exit 0
########################################
#バリデーション結果
if [ -n "$(grep "|NG" $tmp-valid-report)" ] ; then
    #Validation NG
    echo 'VALID_NG@' $(cat $tmp-valid-report) > $tmp-ajax-html
    #echo 2222 > $tmp-ajax-html
    exit 0
fi

########################################
#作成日時、作成者、最終更新日時、更新者を取得
#NX番号で取得すること
result=`${SYSD}/CGI/DFS_INFO/CREATE_LASTUPDATE $1 ${DATAD}/$(cat $tmp-category-nx)/LV1 ${NUM}`
CREATE_DATE=$(cat $tmp-create-dt)
CREATE_USER=$(cat $tmp-create-user)
LASTUPDATE_DT=$(cat $tmp-lastupdate-dt)
LASTUPDATE_USER=$(cat $tmp-lastupdate-user)

########################################
#更新日時を設定
UPDATE_DATE=$(date +%Y%m%d%H%M%S)

########################################
#更新者の取得
UPDATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))

########################################
#該当のデータ操作をロック
LOCK=`${SYSD}/CGI/LOCK/LOCK $1 'OPERATION_LIST' ${NUM}`
LOCK_STATUS=$(echo $LOCK | cut -d'.' -f4)
[ ${LOCK_STATUS} != 'LOCKED' ] && exit 0 || :

########################################
#データ配置

########################################
#カテゴリを変更した場合
#既存のカテゴリの該当オペをdファイル化
if [ "$(cat $tmp-category-no)" != "$(cat $tmp-category-nx)" ]; then
  #LV1
  cat $tmp-pk-1 > ${DATAD}/${CATEGORY_NX}/LV1/${NUM}_1_${UPDATE_USER}_${UPDATE_DATE}_d
  cat $tmp-pk-2 > ${DATAD}/${CATEGORY_NX}/LV1/${NUM}_2_${UPDATE_USER}_${UPDATE_DATE}_d
  cat $tmp-pk-3 > ${DATAD}/${CATEGORY_NX}/LV1/${NUM}_3_${UPDATE_USER}_${UPDATE_DATE}_d
  #LV2  
  rm -f ${DATAD}/${CATEGORY_NX}/LV2/${NUM}_*
  cp -fp ${DATAD}/${CATEGORY_NX}/LV1/${NUM}_*_${UPDATE_DATE}_d ${DATAD}/${CATEGORY_NX}/LV2/
  #LV3
  rm -f ${DATAD}/${CATEGORY_NX}/LV3/${NUM}_*
  for file in $(ls ${DATAD}/${CATEGORY_NX}/LV2/${NUM}_*_${UPDATE_DATE}_d | sort -t$'_' -nk1);
  do
    VALUE=$(echo $VALUE `cat $file`)
  done
  echo ${VALUE} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} \
  > ${DATAD}/${CATEGORY_NX}/LV3/${NUM}_operation-list_${UPDATE_DATE}_d
fi

#LV1
cat $tmp-pk-1 > ${DATAD}/${CATEGORY_NO}/LV1/${NUM}_1_${UPDATE_USER}_${UPDATE_DATE}
cat $tmp-pk-2 > ${DATAD}/${CATEGORY_NO}/LV1/${NUM}_2_${UPDATE_USER}_${UPDATE_DATE}
cat $tmp-pk-3 > ${DATAD}/${CATEGORY_NO}/LV1/${NUM}_3_${UPDATE_USER}_${UPDATE_DATE}

#LV2
rm -f ${DATAD}/${CATEGORY_NO}/LV2/${NUM}_*
cp -fp ${DATAD}/${CATEGORY_NO}/LV1/${NUM}_*_${UPDATE_DATE} ${DATAD}/${CATEGORY_NO}/LV2/

#LV3
rm -f ${DATAD}/${CATEGORY_NO}/LV3/${NUM}_*
for file in $(ls ${DATAD}/${CATEGORY_NO}/LV2/${NUM}_*_${UPDATE_DATE} | sort -t$'_' -nk1);
do
  VALUE=$(echo $VALUE `cat $file`)
done
echo ${VALUE} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} \
> ${DATAD}/${CATEGORY_NO}/LV3/${NUM}_operation-list_${UPDATE_DATE}

########################################
#正規データ配置
#なにがしかのカテゴリNoの下にあるLV3データをかき集め、ファイルパスからカテゴリNoを、ファイルデータからオペ番号を
#紐付けたマップを作成
ls ${DATAD}/*/LV3/*[^_d] | awk '{split($0,ary,"/"); print ary[7], ary[9]}' | cut -d'_' -f1 | LANG=C sort -k1 > $tmp-cate-list-map
#cp $tmp-cate-list-map /tmp/tmp-cate-list-map

#オペカテゴリ一覧
cat ${SYSD}/DATA/OPERATION_CATEGORY/LISTS/LV3/*[^_d] | awk '{print $1,$2}' | 
LANG=C sort -k1 > $tmp-cate-all
#cp $tmp-cate-all /tmp/tmp-cate-all

#オペ一覧
cat ${DATAD}/*/LV3/*[^_d] | LANG=C sort -k1 > $tmp-ope-all
#cp $tmp-ope-all /tmp/tmp-ope-all

#JOIN
#マップとカテゴリ
LANG=C join -1 1 -2 1 $tmp-cate-list-map $tmp-cate-all | LANG=C sort -k2 > $tmp-ope-category
#cp $tmp-ope-category /tmp/tmp-ope-category 

#カテゴリとオペ一覧
LANG=C join -1 2 -2 1 $tmp-ope-category $tmp-ope-all > $tmp-operations
#cp $tmp-operations /tmp/tmp-operations

#カテゴリ情報とマッピングしたオペ一覧をLISTS/LV3へ配置
rm -f ${DATAD}/LV3/operations_*
mv $tmp-operations ${DATAD}/LV3/operations_${UPDATE_DATE}

########################################
#データ操作ロックを解除
UNLOCK_STATUS=`${SYSD}/CGI/LOCK/UNLOCK $1 'OPERATION_LIST' ${NUM}`
[ ${UNLOCK_STATUS} != 'UNLOCK'] && exit 0 || :

########################################
#
echo "111"> $tmp-ajax-html

########################################
#ending
echo "OK"
exit 0
