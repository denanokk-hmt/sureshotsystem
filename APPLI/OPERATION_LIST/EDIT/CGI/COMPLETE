#!/bin/bash -evx
#

########################################
#	OPERATION_LIST/EDIT COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
DATAD=${SYSD}/DATA/${CATEGORY}/LISTS

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#作業カテゴリ更新中は、処理をさせない
#ls ${SYSD}/LOCK/OPERATION_CATEGORY/* > $tmp-checker
#if [ -n cat $tmp-checker ] ; then
#    echo "333" > $tmp-ajax-html
#    exit 0
#fi

#######################################
#フォームの入力値を取得
PAGE_CATEGORY_NM=$(nameread PAGE_CATEGORY_NM $tmp-post)                 #フィルター:カテゴリ名
PAGE_CATEGORY_NO=$(nameread CATEGORY_NO  $tmp-post)                     #フィルター:カテゴリNO
NUM=$(nameread EDIT_OPERATION_NO $tmp-post)                             #作業番号
OPE_CATEGORY_NO=$(nameread EDIT_OPERATION_CATEGORY_NO $tmp-post)        #作業カテゴリ番号
OPE_CATEGORY_NX=$(nameread EDIT_OPERATION_CATEGORY_NX $tmp-post)        #作業カテゴリ番号(変更前)
OPE_CATEGORY_NM=$(nameread EDIT_OPERATION_CATEGORY_NAME $tmp-post)      #作業カテゴリ名
OPE_NM_EN=$(nameread EDIT_OPERATION_NAME $tmp-post)                     #作業名(EN)
OPE_NM_JP=$(nameread EDIT_OPERATION_NAME_JP $tmp-post)                  #作業名(JP)
OPE_PRICE=$(nameread EDIT_OPERATION_PRICE $tmp-post)                    #プライス
OPE_REMARKS=$(nameread EDIT_OPERATION_REMARKS $tmp-post)                #備考

#######################################
#&エスケープ
OPE_NM_EN=$(echo ${OPE_NM_EN} | sed 's/\&/\\\\\\&/')
OPE_NM_JP=$(echo ${OPE_NM_JP} | sed 's/\&/\\\\\\&/')
OPE_REMARKS=$(echo ${OPE_REMARKS} | sed 's/\&/\\\\\\&/')

########################################
#重複確認
cat ${DATAD}/${OPE_CATEGORY_NO}/LV3/* | awk -v cat=${OPE_CATEGORY_NO} -v nm=${OPE_NM_EN} '$2==cat&&$4==nm{print $1}' > $tmp-valid1
if [ -n "$(cat $tmp-valid1)" ] ; then
    echo 2222 > $tmp-ajax-html
    exit 0
fi

########################################
#既存データから作成日時取得、現在日時を更新日時とする
ls ${DATAD}/${OPE_CATEGORY_NX}/LV1/${NUM}_operation_* | cut -d'_' -f4 | sort -nk1,1 | head -n 1 > $tmp-create
CREATE_DATE=$(cat $tmp-create)
UPDATE_DATE=$(date +%Y%m%d%H%M%S)

########################################
#更新者の取得
CREATE_USER=$(cat ${DATAD}/${OPE_CATEGORY_NX}/LV3/${_NUM}* | awk '{print $8}')
UPDATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))

########################################
#該当のデータ操作をロック
LOCK=`${SYSD}/CGI/LOCK/LOCK $1 'OPERATION_LIST' ${NUM}`
LOCK_STATUS=$(echo $LOCK | cut -d'.' -f4)
[ ${LOCK_STATUS} != 'LOCKED' ] && exit 0 || :

########################################
#入力値を一時ファイル化
#operation_id	operation_nm_en	operation_nm_jp	price	remarks	create_date	update_date	create_user	update_user	del_flg
echo ${NUM} ${OPE_NM_EN} ${OPE_NM_JP} ${OPE_PRICE} ${OPE_REMARKS} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} 0 > $tmp-operation

########################################
#データ格納

#カテゴリを変更した場合
#旧カテゴリのデータをdファイルにする
#すでにdファイル化されているデータについては画面操作がないので範疇にいれない
if [ "${OPE_CATEGORY_NO}" != "${OPE_CATEGORY_NX}" ]; then
    #LV1の該当オペデータの最終更新日を取得
    LAST_UPDATE=$(ls ${DATAD}/${OPE_CATEGORY_NX}/LV1/${NUM}_operation_* | sort -k1 | tail -n1 | cut -d'_' -f3)
    #LV1 dファイル追加
    cp ${DATAD}/${OPE_CATEGORY_NX}/LV1/${NUM}_operation_${LAST_UPDATE}* ${DATAD}/${OPE_CATEGORY_NX}/LV1/${NUM}_operation_${UPDATE_DATE}_d
    #LV2 dファイル化
    mv ${DATAD}/${OPE_CATEGORY_NX}/LV2/${NUM}_operation_* ${DATAD}/${OPE_CATEGORY_NX}/LV2/${NUM}_operation_${LAST_UPDATE}_d   
    #LV3 dファイル化
    mv ${DATAD}/${OPE_CATEGORY_NX}/LV3/${NUM}_operation_* ${DATAD}/${OPE_CATEGORY_NX}/LV3/${NUM}_operation_${LAST_UPDATE}_d   
fi

#LV1
#原始データとして、ファイル追加のみを行う
mv $tmp-operation ${DATAD}/${OPE_CATEGORY_NO}/LV1/${NUM}_operation_${UPDATE_DATE}

#LV2を更新ファイルと入れ替え
#削除フラグは除外-->dファイルとして扱う
rm -f ${DATAD}/${OPE_CATEGORY_NO}/LV2/${NUM}_operation_*
cat ${DATAD}/${OPE_CATEGORY_NO}/LV1/${NUM}_operation_${UPDATE_DATE} | awk '{$NF=""; print $0}' > ${DATAD}/${OPE_CATEGORY_NO}/LV2/${NUM}_operation_${UPDATE_DATE}

#LV3:更新ファイルと入れ替え
#LV2のコピー
rm -f ${DATAD}/${OPE_CATEGORY_NO}/LV3/${NUM}_operation_*
cp -fp ${DATAD}/${OPE_CATEGORY_NO}/LV2/${NUM}_operation_${UPDATE_DATE} ${DATAD}/${OPE_CATEGORY_NO}/LV3/

########################################
#正規データ配置
#なにがしかのカテゴリNoの下にあるLV3データをかき集め、ファイルパスからカテゴリNoを、ファイルデータからオペ番号を
#紐付けたマップを作成
ls ${DATAD}/*/LV3/*[^_d] | awk '{split($0,ary,"/"); print ary[7], ary[9]}' | cut -d'_' -f1 | LANG=C sort -k1 > $tmp-cate-list-map
#cp $tmp-cate-list-map /tmp/tmp-cate-list-map

#オペカテゴリ一覧
cat ${SYSD}/DATA/OPERATION_CATEGORY/LISTS/LV3/*[^_d] | awk '{print $1,$2}' | 
LANG=C sort -k1 > $tmp-cate-all
#cp $tmp-cate-all /tmp/tmp-cate-all

#オペ一覧
cat ${DATAD}/*/LV3/*[^_d] | LANG=C sort -k1 > $tmp-ope-all
#cp $tmp-ope-all /tmp/tmp-ope-all

#JOIN
#マップとカテゴリ
#ソートは二番目のオペ番号を数値昇順
LANG=C join -1 1 -2 1 $tmp-cate-list-map $tmp-cate-all | LANG=C sort -k2 > $tmp-ope-category
#cp $tmp-ope-category /tmp/tmp-ope-category 

#カテゴリとオペ一覧
LANG=C join -1 2 -2 1 $tmp-ope-category $tmp-ope-all > $tmp-operations
#cp $tmp-operations /tmp/tmp-operations

#カテゴリ情報とマッピングしたオペ一覧をLISTS/LV3へ配置
rm -f ${DATAD}/LV3/operations_*
mv $tmp-operations ${DATAD}/LV3/operations_${CREATE_DATE}

########################################
#データ操作ロックを解除
UNLOCK_STATUS=`${SYSD}/CGI/LOCK/UNLOCK $1 'OPERATION_LIST' ${NUM}`
[ ${UNLOCK_STATUS} != 'UNLOCK'] && exit 0 || :

########################################
#
echo "111"> $tmp-ajax-html

########################################
#ending
echo "OK"
exit 0
