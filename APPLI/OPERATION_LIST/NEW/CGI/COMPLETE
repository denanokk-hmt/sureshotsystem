#!/bin/bash -evx
#

########################################
#	OPERATION_LIST/NEW COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
DATAD=${SYSD}/DATA/${CATEGORY}/LISTS

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

########################################
#作業カテゴリ更新中は、処理をさせない
#ls ${SYSD}/LOCK/OPERATION_CATEGORY/* > $tmp-checker 2> /dev/null
#if [ -n cat $tmp-checker ] ; then
#    echo "333" > $tmp-ajax-html
#    exit 0
#fi

#######################################
#フォームの入力値を取得
nameread NEW_CATEGORY_NO      $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-category-no
CATEGORY_NO=$(cat $tmp-category-no)
nameread NEW_OPERATION_NAME   $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-2-org
nameread NEW_OPERATION_PRICE  $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-pk-3
nameread PAGE_CATEGORY_NO     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-page-category-no
nameread PAGE_CATEGORY_NM     $tmp-post | awk '{gsub(/^\_$/,"",$1);print}' > $tmp-page-category-nm
nameread PAGE                 $tmp-post > $tmp-page #表示ページ
nameread SEARCH               $tmp-post > $tmp-search #検索状態

#######################################
#ページの表示状態を取得
PAGE_CATEGORY_NO=$(cat $tmp-page-category-no) #検索条件
PAGE_CATEGORY_NM=$(cat $tmp-page-category-nm) #検索条件
[ -n "$(cat $tmp-page)" ] && PAGE=$(cat $tmp-page) || PAGE=1
[ -n "$(cat $tmp-search)" ] && SEARCH=$(cat $tmp-search) || SEARCH='searc=0'

#######################################
#「&」エスケープ
cat $tmp-pk-2-org | sed 's/\&/\\\\\\&/' > $tmp-pk-2


########################################
#バリデーションを設定

#CATEGORY_NM
cat $tmp-category | awk '{print sprintf("CATEGORY_NM|ISNULL|%s",$1)}'                                >> $tmp-validation  #必須選択

#OPERATION_NAME_NEW
cat $tmp-pk-2 | awk '{print sprintf("OPERATION_NAME|ISNULL|%s",$1)}'                                >> $tmp-validation  #必須入力
cat $tmp-pk-2 | awk '{print sprintf("OPERATION_NAME|LENGTH|%s,3,0",$1)}'                            >> $tmp-validation  #3文字以上
cat $tmp-pk-2 | awk '{print sprintf("OPERATION_NAME|DUPLICATE|OPERATION_LIST,LISTS,"",2,%s",$1)}'   >> $tmp-validation  #重複確認

#PRICE
cat $tmp-pk-3 | awk '{print sprintf("OPERATION_PRICE|ISNULL|%s",$1)}'                                >> $tmp-validation  #必須入力

########################################
#バリデーションを実行
result=`${SYSD}/CGI/VALID/VALIDATION $1`

########################################
#バリデーション結果
if [ -n "$(grep "|NG" $tmp-valid-report)" ] ; then
    #Validation NG
    echo 'VALID_NG@' $(cat $tmp-valid-report) > $tmp-ajax-html
    #echo 2222 > $tmp-ajax-html
    exit 0
fi

#########################################
##新規作業番号を確定する
NEW_NUM=$(${SYSD}/CGI/NUMBER/NUMBER $1)
echo ${NEW_NUM} > $tmp-pk-1

########################################
#日付を設定
CREATE_DATE=$(date +%Y%m%d%H%M%S)
UPDATE_DATE=$CREATE_DATE

########################################
#更新者の取得
CREATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))
UPDATE_USER=${CREATE_USER}

########################################
#作業リストディレクトリを作成する
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${SYSD}/DATA/OPERATION_LIST/LISTS ${SYSD}/DATA/OPERATION_LIST/LISTS`

########################################
#作業リスト格納用カテゴリDirを作成
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${SYSD}/DATA/OPERATION_LIST/LISTS/${CATEGORY_NO} ${SYSD}/DATA/OPERATION_LIST/LISTS/${CATEGORY_NO}`

########################################
#作業ディテールディレクトリを作成する
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${SYSD}/DATA/OPERATION_DETAIL/LISTS ${SYSD}/DATA/OPERATION_DETAIL/LISTS`

########################################
#作業ディテール格納用カテゴリDirを作成
result=`${SYSD}/CGI/DATA/DFS_NEW $$ ${SYSD}/DATA/OPERATION_DETAIL/LISTS/${CATEGORY_NO} ${SYSD}/DATA/OPERATION_DETAIL/LISTS/${CATEGORY_NO}`

########################################
#データ配置
#LV1
cat $tmp-pk-1 > ${DATAD}/${CATEGORY_NO}/LV1/${NEW_NUM}_1_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-2 > ${DATAD}/${CATEGORY_NO}/LV1/${NEW_NUM}_2_${CREATE_USER}_${CREATE_DATE}
cat $tmp-pk-3 > ${DATAD}/${CATEGORY_NO}/LV1/${NEW_NUM}_3_${CREATE_USER}_${CREATE_DATE}

#LV2
cp -fp ${DATAD}/${CATEGORY_NO}/LV1/${NEW_NUM}_* ${DATAD}/${CATEGORY_NO}/LV2/

#LV3
for file in $(ls ${DATAD}/${CATEGORY_NO}/LV2/${NEW_NUM}_* | sort -t$'_' -nk1);
do
  VALUE=$(echo $VALUE `cat $file`)
done
echo ${VALUE} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} \
> ${DATAD}/${CATEGORY_NO}/LV3/${NEW_NUM}_operation-list_${CREATE_DATE}

########################################
#正規データ配置
#なにがしかのカテゴリNoの下にあるLV3データをかき集め、ファイルパスからカテゴリNoを、ファイルデータから作業番号を
#紐付けたマップを作成
ls ${DATAD}/*/LV3/*[^_d] | awk '{split($0,ary,"/"); print ary[7], ary[9]}' | cut -d'_' -f1 | LANG=C sort -k1 > $tmp-cate-list-map

#作業カテゴリ一覧
cat ${SYSD}/DATA/OPERATION_CATEGORY/LISTS/LV3/*[^_d] | awk '{print $1,$2}' | LANG=C sort -k1 > $tmp-cate-all

#作業一覧
cat ${DATAD}/*/LV3/*[^_d] | LANG=C sort -k1 > $tmp-ope-all

#JOIN
#マップとカテゴリ
LANG=C join -1 1 -2 1 $tmp-cate-list-map $tmp-cate-all | LANG=C sort -k2 > $tmp-ope-category

#カテゴリと作業一覧
LANG=C join -1 2 -2 1 $tmp-ope-category $tmp-ope-all > $tmp-operations

#カテゴリ情報とマッピングした作業一覧をLISTS/LV3へ配置
rm -f ${DATAD}/LV3/operations_*
mv $tmp-operations ${DATAD}/LV3/operations_${CREATE_DATE}


########################################
#作業カテゴリを取得
cat ${SYSD}/DATA/OPERATION_CATEGORY/LISTS/LV3/*[^_d]    |
LANG=C sort -nk1,1                                      > $tmp-operation-category

########################################
#登録済作業用の作業カテゴリ
# 1;カテゴリ番号 2;カテゴリ名
mojihame -lRECORDS ${SYSD}/APPLI/${CATEGORY}/LISTS/HTML/CATEGORY_LIST.HTML $tmp-operation-category > $tmp-operation-category-list

########################################
#新規登録作業用の作業カテゴリ
# 1;カテゴリ番号 2;カテゴリ名
mojihame -lRECORDS ${SYSD}/APPLI/${CATEGORY}/LISTS/HTML/CATEGORY_NEW.HTML $tmp-operation-category > $tmp-operation-category-new

########################################
# 改行文字を「\\n」という3文字の文字列に置換
CATEGORY_LIST=`awk -F\n -v ORS='\\\\n' '{print}' $tmp-operation-category-list`
CATEGORY_NEW=`awk -F\n -v ORS='\\\\n' '{print}' $tmp-operation-category-new`

#######################################
#ページャーを設定
START_END=`${SYSD}/APPLI/${CATEGORY}/LISTS/CGI/PAGER $1 ${PAGE} ${SEARCH} ${PAGE_CATEGORY_NM} ${PAGE_CATEGORY_NO}`

#######################################
#表示するレコードの開始と終了
START=$(cat $tmp-rec-start)
END=$(cat $tmp-rec-end)

########################################
#作業リストを取得
[ -z "${PAGE_CATEGORY_NO}" ] && ${PAGE_CATEGORY_NO}=0 || :
if [ "${PAGE_CATEGORY_NO}" -gt 0 ] ; then
    #ページフィルターにALL以外(空欄を除く)が選択された場合
    cat ${DATAD}/LV3/*[^_d]                                 |
    LANG=C sort -nk2 -nk1                                   |
    awk -v s=${START} -v e=${END} 'NR>=s&&NR<=e&&$9!=1'     |
    juni                                                    > $tmp-records
else
    cat ${DATAD}/LV3/*[^_d]                                 |
    LANG=C sort -nk2 -nk1                                   |
    awk -v s=${START} -v e=${END} 'NR>=s&&NR<=e&&$9!=1'     |
    juni                                                    > $tmp-records
fi

########################################
#レコードHTMLを作成
mojihame -lRECORDS ${SYSD}/APPLI/${CATEGORY}/LISTS/HTML/RECORDS.HTML $tmp-records > $tmp-table-records

########################################
#登録済レコードに作業カテゴリリストを嵌め込む
cat $tmp-table-records                                  |
sed -e "s|###CATEGORY###|${CATEGORY_LIST}|g"            > $tmp-table

########################################
# 改行文字を「\\n」という3文字の文字列に置換
TABLE_RECORDS=`awk -F\n -v ORS='\\\\n' '{print}' $tmp-table`

########################################
#tableにrecordsを嵌め込む
cat ${SYSD}/APPLI/${CATEGORY}/LISTS/HTML/TABLE.HTML     |
sed -e "s|###CATEGORY###|${CATEGORY_NEW}|g"             |
sed -e "s|###TABLE_RECORDS###|${TABLE_RECORDS}|g"       > $tmp-ajax-html

########################################
#ending
echo "OK"
exit 0
