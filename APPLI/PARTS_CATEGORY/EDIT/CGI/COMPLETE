#!/bin/bash -evx
#

########################################
#	PARTS_CATEGORY EDIT COMPLETE.CGI
#
#   引数
#       $1:プロセスID
#
#	Written by hiramatsu


########################################
#基本設定
SYSD=$(cd $(dirname $0) && pwd | awk '{print substr($0, 0, index($0, "sureshotsystem")+13)}')
#exec 2> ${SYSD}/LOG/LOG.$(basename $0).$(date +%Y%m%d).$(date +%H%M%S).$$
tmp=/tmp/tmp_$1
LANG=ja_JP.UTF-8
#PATH=/home/:/home/UTL:/home/TOOL/open-usp-tukubai-2014061402/COMMANDS:$PATH
CATEGORY=`cat $tmp-category`
FUNC=`cat $tmp-func`
DATAD=${SYSD}/DATA/${CATEGORY}/LISTS

########################################
#Check error
ERROR_CHECK(){
	[ $(plus ${PIPESTATUS[@]}) -eq 0 ] && return
cat <<- FIN
	Context-type: text/html
	NG input
FIN
	cat $tmp-result
	exit 1
}

#######################################
#フォームの入力値を取得
NUM=$(nameread PARTS_CATEGORY_ID $tmp-post)
NAME=$(nameread PARTS_CATEGORY_NAME $tmp-post)

########################################
#重複確認
cat ${DATAD}/LV3/*[^_d] | awk -v nm=${NAME} '$2==nm{print $1}' > $tmp-valid1
if [ -n "$(cat $tmp-valid1)" ] ; then
    echo 2222 > $tmp-ajax-html
    exit 0
fi

########################################
#既存データから作成日時取得、現在日時を更新日時とする
ls ${DATAD}/LV1/${NUM}_parts_category_* | cut -d'_' -f5 | sort -nk1,1 | head -n 1 > $tmp-create
CREATE_DATE=$(cat $tmp-create)
UPDATE_DATE=$(date +%Y%m%d%H%M%S)

########################################
#更新者の取得
CREATE_USER=$(cat ${DATAD}/LV3/${NUM}* | awk '{print $5}')
UPDATE_USER=$(cat ${SYSD}/SESSION/$(session_get 'sureshot_stuff_session_id'))

########################################
#　　パーツカテゴリのデータ操作
########################################

########################################
#該当のデータ操作をロック
LOCK=`${SYSD}/CGI/LOCK/LOCK $1 'PARTS_CATEGORY' ${NUM}`
LOCK_STATUS=$(echo $LOCK | cut -d'.' -f4)
[ ${LOCK_STATUS} != 'LOCKED' ] && exit 0 || :

########################################
#入力値を一時ファイル化
#parts_category_id	parts_category_name	create_date	update_date	create_user	update_user	del_flg
echo ${NUM} ${NAME} ${CREATE_DATE} ${UPDATE_DATE} ${CREATE_USER} ${UPDATE_USER} 0 > $tmp-parts-category

########################################
#データ格納
#LV1:原始データとして、ファイル追加のみを行う
mv $tmp-parts-category ${DATAD}/LV1/${NUM}_parts_category_${UPDATE_DATE}

#LV2:変更されたデータとファイルを入れ替える
#削除フラグは除外->dファイルとして扱う
cat  ${DATAD}/LV1/${NUM}_parts_category_${UPDATE_DATE} | awk '{$NF=""; print $0}' > ${DATAD}/LV2/${NUM}_parts_category_${UPDATE_DATE}
ls ${DATAD}/LV2/${NUM}_* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)

#LV3:LV2のコピー
cp -p ${DATAD}/LV2/${NUM}_parts_category_${UPDATE_DATE} ${DATAD}/LV3/${NUM}_parts_category_${UPDATE_DATE}
ls ${DATAD}/LV3/${NUM}_* | sort -nk1 | head -n 1 > $tmp-delete
rm -f $(cat $tmp-delete)

########################################
#データ操作ロックを解除
UNLOCK_STATUS=`${SYSD}/CGI/LOCK/UNLOCK $1 'PARTS_CATEGORY' ${NUM}`
[ ${UNLOCK_STATUS} != 'UNLOCK'] && exit 0 || :


########################################
#　　パーツのデータ操作
########################################

#LISTデータにカテゴリ情報は含めくしたので以下の処理は廃止
##該当カテゴリで登録されているパーツに対して、
## 1.カテゴリ名を修正するための更新処理を行う
#PARTSD=${SYSD}/DATA/PARTS_LIST/LISTS/${NUM}
#for file in `find ${PARTSD}/LV3/*[^_d] -maxdepth 1 -type f`; do
#
#    #パーツ番号を取得
#    num=$(echo $file | cut -d'/' -f9 | cut -d'_' -f1) 
#    update=$(echo $file | cut -d'/' -f9 | cut -d'_' -f3) 
#    ARR+=($num)
#
#    #該当のデータ操作をロック
#    LOCK=`${SYSD}/CGI/LOCK/LOCK $1 'PARTS_LIST' ${num}`
#    LOCK_STATUS=$(echo $LOCK | cut -d'.' -f4)
#    [ ${LOCK_STATUS} != 'LOCKED' ] && exit 0 || :
#
#    #LV1:原始データとして、ファイル追加のみを行う
#    destiny=${PARTSD}/LV1/${num}_parts_${UPDATE_DATE}
#    cat ${PARTSD}/LV1/${num}_parts_${update} | 
#    awk -v nm=${NAME} -v ud=${UPDATE_DATE} -v uu=${UPDATE_USER} \
#    '{print $1, $2, nm, $4, $5, $6, $7, $8, ud, $10}' > $destiny
#
#    #LV2:変更されたデータとファイルを入れ替える
#    cp -fp ${PARTSD}/LV1/${num}_parts_${UPDATE_DATE} ${PARTSD}/LV2/${num}_parts_${UPDATE_DATE}
#    ls ${PARTSD}/LV2/${num}_* | sort -nk1 | head -n 1 > $tmp-delete
#    rm -f $(cat $tmp-delete)
#
#    #LV3:LV2のコピー
#    cp -fp ${PARTSD}/LV2/${num}_parts_${UPDATE_DATE} ${PARTSD}/LV3/${num}_parts_${UPDATE_DATE}
#    ls ${PARTSD}/LV3/${num}_* | sort -nk1 | head -n 1 > $tmp-delete
#    rm -f $(cat $tmp-delete)
#    
#    #データ操作ロックを解除
#    UNLOCK_STATUS=`${SYSD}/CGI/LOCK/UNLOCK $1 'PARTS_LIST' ${num}`
#    [ ${UNLOCK_STATUS} != 'UNLOCK'] && exit 0 || :
#done

########################################
#正規データ配置
#なにがしかのカテゴリNoの下にあるLV3データをかき集め、ファイルパスからカテゴリNoを、ファイルデータからパーツ番号を
#紐付けたマップを作成
ls ${SYSD}/DATA/PARTS_LIST/LISTS/*/LV3/*[^_d] | awk '{split($0,ary,"/"); print ary[7], ary[9]}' | cut -d'_' -f1 | LANG=C sort -k1 > $tmp-cate-list-map

#パーツカテゴリ一覧
cat ${SYSD}/DATA/PARTS_CATEGORY/LISTS/LV3/*[^_d] | awk '{print $1,$2}' | LANG=C sort -k1 > $tmp-cate-all

#パーツ一覧
cat ${SYSD}/DATA/PARTS_LIST/LISTS/*/LV3/*[^_d] | LANG=C sort -k1 > $tmp-parts-all

#JOIN
#マップとカテゴリ
#ソートは二番目のオペ番号を数値昇順
LANG=C join -1 1 -2 1 $tmp-cate-list-map $tmp-cate-all | LANG=C sort -k2 > $tmp-parts-category

#カテゴリとパーツ一覧
LANG=C join -1 2 -2 1 $tmp-parts-category $tmp-parts-all > $tmp-parts-list

#カテゴリ情報とマッピングしたパーツ一覧をLISTS/LV3へ配置
rm -f ${SYSD}/DATA/PARTS_LIST/LISTS/LV3/parts_*
mv $tmp-parts-list ${SYSD}/DATA/PARTS_LIST/LISTS/LV3/parts_${CREATE_DATE}

########################################
#
echo "111"> $tmp-ajax-html

########################################
#ending
echo "OK"
exit 0
